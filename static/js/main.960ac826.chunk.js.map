{"version":3,"sources":["components/Card.js","components/CardList.js","components/CounterButton.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","map","user","components_Card","key","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","color","props","onClick","PureComponent","Header","components_CounterButton","Component","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","hasError","error","info","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.960ac826.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const Card = (props) => {\r\nconst Card = ({name, email, id}) => {\r\n\r\n    // const {name, email, id} = props;\r\n\r\n    return (\r\n\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    console.log(\"Rendering CardList\")\r\n\r\n    return (\r\n        < div >\r\n        {\r\n            robots.map((user) => {\r\n                return (\r\n                    <Card\r\n                        key={user.id}\r\n                        id={user.id}\r\n                        name={user.name}\r\n                        email={user.email}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n</div>\r\n\r\n)\r\n    ;\r\n\r\n};\r\n\r\nexport default CardList;","import React, {PureComponent} from 'react';\r\n\r\n// will re-render only when props will actually change\r\nclass CounterButton extends PureComponent {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    // use with Component, may impact performance (run before render() )\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     if (this.state.count !== nextState.count) {\r\n    //         return true\r\n    //     }\r\n    //     return false\r\n    // }\r\n\r\n    updateCount = () => {\r\n        // setState is async\r\n        this.setState((state) => {\r\n            return {count: (state.count + 1)}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Rendering CounterButton\")\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from '../components/CounterButton';\r\n\r\nclass Header extends Component {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log(\"Rendering Header\")\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <CounterButton color={'red'}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n    console.log(\"Rendering SearchBox\")\r\n\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n                   aria-label=\"Search Robots\"\r\n                   type=\"search\"\r\n                   placeholder=\"search robots\"\r\n                   onChange={searchChange}/>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n\r\n        <div\r\n            style={{\r\n                overflowY: 'scroll',\r\n                border: '1px solid black',\r\n                height: '800px'\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    // sort of try-catch\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.hasError) {\r\n            return <h1>OOps. That is not good</h1>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport Header from '../components/Header';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions'\r\n\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n\r\n        const filteredRobots =\r\n            robots.filter(robot => {\r\n                return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n            });\r\n\r\n        return isPending ?\r\n            <h1> Loading...</h1> :\r\n            (\r\n                <div className=\"tc\">\r\n                    <Header/>\r\n                    <SearchBox\r\n                        searchField={searchField}\r\n                        searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n// returns a function for the thunk middleware\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers} from 'redux'\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers'\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}